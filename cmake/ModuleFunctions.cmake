# cmake/ModuleFunctions.cmake
# Functions for module-to-header generation system

function(liara_generate_header_from_module)
    cmake_parse_arguments(
            ARG
            ""
            "MODULE_FILE;OUTPUT_HEADER;MODULE_NAME"
            "DEPENDENCIES"
            ${ARGN}
    )

    if(NOT ARG_MODULE_FILE OR NOT ARG_OUTPUT_HEADER OR NOT ARG_MODULE_NAME)
        message(FATAL_ERROR "liara_generate_header_from_module requires MODULE_FILE, OUTPUT_HEADER, and MODULE_NAME")
    endif()

    # Ensure output directory exists
    get_filename_component(OUTPUT_DIR "${ARG_OUTPUT_HEADER}" DIRECTORY)
    file(MAKE_DIRECTORY "${OUTPUT_DIR}")
    message(STATUS "OUTPUT_DIR: ${OUTPUT_DIR}")

    # Custom command to generate header
    add_custom_command(
            OUTPUT "${ARG_OUTPUT_HEADER}"
            COMMAND ${CMAKE_COMMAND}
            -DMODULE_FILE=${ARG_MODULE_FILE}
            -DOUTPUT_HEADER=${ARG_OUTPUT_HEADER}
            -DMODULE_NAME=${ARG_MODULE_NAME}
            -P ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/ExecuteHeaderGeneration.cmake
            DEPENDS "${ARG_MODULE_INTERFACE}"
            COMMENT "Generating header ${ARG_OUTPUT_HEADER} from module ${ARG_MODULE_FILE}"
            VERBATIM
    )

    # Create a target for the generated header
    string(REPLACE "/" "_" TARGET_NAME "generated_header_${ARG_MODULE_NAME}")
    string(REPLACE "." "_" TARGET_NAME "${TARGET_NAME}")
    add_custom_target(${TARGET_NAME} DEPENDS "${ARG_OUTPUT_HEADER}")

    # Set properties for dependency tracking
    set_property(SOURCE "${ARG_OUTPUT_HEADER}" PROPERTY GENERATED TRUE)
endfunction()

function(liara_generate_proxy_header)
    cmake_parse_arguments(
            ARG
            ""
            "MODULE_NAME;PROXY_HEADER;GENERATED_HEADER"
            ""
            ${ARGN}
    )

    if(NOT ARG_MODULE_NAME OR NOT ARG_PROXY_HEADER)
        message(FATAL_ERROR "liara_generate_proxy_header requires MODULE_NAME and PROXY_HEADER")
    endif()

    # Get modules support status
    get_property(modules_enabled GLOBAL PROPERTY LIARA_MODULES_ENABLED)

    # Generate proxy header content
    set(PROXY_CONTENT "")
    string(APPEND PROXY_CONTENT "#pragma once\n")
    string(APPEND PROXY_CONTENT "// Auto-generated proxy header for ${ARG_MODULE_NAME}\n")
    string(APPEND PROXY_CONTENT "// Generated by Liara Engine Module System\n")
    string(APPEND PROXY_CONTENT "// This header automatically selects between C++20 modules and generated headers\n\n")

    if(modules_enabled)
        string(APPEND PROXY_CONTENT "#if defined(LIARA_MODULES_ENABLED) && !defined(LIARA_FORCE_NO_MODULES)\n")
        string(APPEND PROXY_CONTENT "    import ${ARG_MODULE_NAME};\n")
        string(APPEND PROXY_CONTENT "#else\n")
        string(APPEND PROXY_CONTENT "    #error \"Modules should be enabled but fallback was triggered for ${ARG_MODULE_NAME}\"\n")
        string(APPEND PROXY_CONTENT "#endif\n")
    else()
        if(ARG_GENERATED_HEADER)
            # Calculate relative path from proxy to generated header
            get_filename_component(PROXY_DIR "${ARG_PROXY_HEADER}" DIRECTORY)
            file(RELATIVE_PATH REL_PATH "${PROXY_DIR}" "${ARG_GENERATED_HEADER}")

            string(APPEND PROXY_CONTENT "#ifndef LIARA_MODULES_ENABLED\n")
            string(APPEND PROXY_CONTENT "    #include \"${REL_PATH}\"\n")
            string(APPEND PROXY_CONTENT "#else\n")
            string(APPEND PROXY_CONTENT "    import ${ARG_MODULE_NAME};\n")
            string(APPEND PROXY_CONTENT "#endif\n")
        else()
            string(APPEND PROXY_CONTENT "#error \"No generated header available for ${ARG_MODULE_NAME}\"\n")
        endif()
    endif()

    # Write proxy header
    file(WRITE "${ARG_PROXY_HEADER}" "${PROXY_CONTENT}")
    message(STATUS "Generated proxy header: ${ARG_PROXY_HEADER}")
endfunction()

function(liara_add_module_with_proxy)
    cmake_parse_arguments(
            ARG
            ""
            "TARGET;MODULE_INTERFACE;MODULE_IMPL;MODULE_NAME;HEADER_NAME"
            ""
            ${ARGN}
    )

    if(NOT ARG_TARGET OR NOT ARG_MODULE_INTERFACE OR
            NOT ARG_MODULE_NAME OR NOT ARG_HEADER_NAME)
        message(FATAL_ERROR "liara_add_module_with_proxy requires all parameters")
    endif()

    # Default implementation file to empty if not provided
    if(NOT ARG_MODULE_IMPL)
        set(ARG_MODULE_IMPL "")
    endif()

    get_property(modules_enabled GLOBAL PROPERTY LIARA_MODULES_ENABLED)

    # Set up paths for generated files
    set(GENERATED_HEADER "${CMAKE_CURRENT_BINARY_DIR}/generated/${ARG_HEADER_NAME}.h")
    set(PROXY_HEADER "${CMAKE_CURRENT_BINARY_DIR}/include/Liara/${ARG_HEADER_NAME}.h")

    # Ensure directories exist
    get_filename_component(GENERATED_DIR "${GENERATED_HEADER}" DIRECTORY)
    get_filename_component(PROXY_DIR "${PROXY_HEADER}" DIRECTORY)
    file(MAKE_DIRECTORY "${GENERATED_DIR}")
    file(MAKE_DIRECTORY "${PROXY_DIR}")

    if(modules_enabled)
        message(STATUS "Adding module ${ARG_MODULE_NAME} (${ARG_HEADER_NAME}) to target ${ARG_TARGET}")

        # Add module files
        if(MSVC)
            target_sources(${ARG_TARGET} PRIVATE
                    ${ARG_MODULE_INTERFACE}
                    ${ARG_MODULE_IMPL}
            )
        else()
            target_sources(${ARG_TARGET}
                    PUBLIC FILE_SET CXX_MODULES FILES ${ARG_MODULE_INTERFACE}
            )
            target_sources(${ARG_TARGET} PRIVATE ${ARG_MODULE_IMPL})
        endif()

        # Generate proxy header that imports the module
        liara_generate_proxy_header(
                MODULE_NAME "${ARG_MODULE_NAME}"
                PROXY_HEADER "${PROXY_HEADER}"
        )

    else()
        message(STATUS "Generating header and proxy for ${ARG_MODULE_NAME} (${ARG_HEADER_NAME})")

        # Generate main header from module first
        liara_generate_header_from_module(
                MODULE_FILE "${ARG_MODULE_INTERFACE}"
                OUTPUT_HEADER "${GENERATED_HEADER}"
                MODULE_NAME "${ARG_MODULE_NAME}"
        )

        # Generate proxy header that includes the generated header
        liara_generate_proxy_header(
                MODULE_NAME "${ARG_MODULE_NAME}"
                PROXY_HEADER "${PROXY_HEADER}"
                GENERATED_HEADER "${GENERATED_HEADER}"
        )

        # Create dependency on header generation
        string(REPLACE "/" "_" HEADER_TARGET "generated_header_${ARG_MODULE_NAME}")
        string(REPLACE "." "_" HEADER_TARGET "${HEADER_TARGET}")
        add_dependencies(${ARG_TARGET} ${HEADER_TARGET})

        # Add implementation
        target_sources(${ARG_TARGET} PRIVATE ${ARG_MODULE_IMPL})
    endif()

    # Add proxy header include directory to target
    target_include_directories(${ARG_TARGET} PUBLIC
            "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>"
            "$<INSTALL_INTERFACE:include>"
    )

    # Add proxy header as source for dependency tracking
    target_sources(${ARG_TARGET} PRIVATE "${PROXY_HEADER}")
    set_property(SOURCE "${PROXY_HEADER}" PROPERTY GENERATED TRUE)

    # Create target for proxy header
    string(REPLACE "/" "_" PROXY_TARGET "proxy_header_${ARG_HEADER_NAME}")
    add_custom_target(${PROXY_TARGET} DEPENDS "${PROXY_HEADER}")
    add_dependencies(${ARG_TARGET} ${PROXY_TARGET})

endfunction()