#!/bin/bash
# Liara Engine - Style Tools Setup
# Installe et configure les outils de vérification de style de code

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[SETUP]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SETUP]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[SETUP]${NC} $1"
}

log_error() {
    echo -e "${RED}[SETUP]${NC} $1"
}

print_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Setup code style tools for Liara Engine

OPTIONS:
    --install-tools     Install clang-format and clang-tidy
    --setup-hooks       Install git pre-commit hooks
    --all               Do everything (default)
    --help              Show this help
EOF
}

detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &>/dev/null; then
            echo "ubuntu"
        elif command -v dnf &>/dev/null; then
            echo "fedora"
        elif command -v pacman &>/dev/null; then
            echo "arch"
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

verify_tools() {
    log_info "Verifying installed tools..."
    local clang_format_installed=command -v clang-format &>/dev/null
    local clang_tidy_installed=command -v clang-tidy &>/dev/null

    local return_code=0 # 0 = no missing tools, 1 = clang-format missing, 2 = clang-tidy missing, 3 = both missing
    if [[ "$clang_format_installed" == "false" ]]; then
        return_code=1
    fi
    if [[ "$clang_tidy_installed" == "false" ]]; then
        return_code=$((return_code + 1))
    fi
    return $return_code
}

install_tools() {
    log_info "Verifying availability of required tools..."
    local tools=verify_tools

    if $tools; then
        log_success "All required tools are already installed."
        return 0
    else
        log_warning "Some required tools are missing. Proceeding with installation..."
    fi

    local os
    os=$(detect_os)

    log_info "Detected OS: $os"
    log_info "Installing clang-format and clang-tidy..."

    case $os in
        ubuntu)
            log_info "Installing via apt..."
            sudo apt-get update
            sudo apt-get install -y clang-format clang-tidy
            ;;
        fedora)
            log_info "Installing via dnf..."
            sudo dnf install -y clang-tools-extra
            ;;
        arch)
            log_info "Installing via pacman..."
            sudo pacman -S --noconfirm clang
            ;;
        macos)
            if command -v brew &>/dev/null; then
                log_info "Installing via Homebrew..."
                brew install clang-format
            else
                log_error "Homebrew not found. Please install Homebrew first:"
                echo "  /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                return 1
            fi
            ;;
        windows)
            log_warning "Windows detected. Please install LLVM manually:"
            echo "  1. Download LLVM from: https://releases.llvm.org/"
            echo "  2. Make sure clang-format and clang-tidy are in PATH"
            echo "  3. Or use vcpkg: vcpkg install llvm[clang-tools-extra]"
            return 1
            ;;
        *)
            log_error "Unsupported OS. Please install clang-format and clang-tidy manually."
            return 1
            ;;
    esac

    # Vérifier l'installation
    if command -v clang-format &>/dev/null && command -v clang-tidy &>/dev/null; then
        log_success "Tools installed successfully!"
        echo "  clang-format: $(which clang-format)"
        echo "  clang-tidy: $(which clang-tidy)"
    else
        log_error "Installation failed or tools not found in PATH"
        return 1
    fi
}

setup_hooks() {
    log_info "Setting up git hooks..."

    local hooks_dir="$PROJECT_ROOT/.git/hooks"

    if [[ ! -d "$hooks_dir" ]]; then
        log_error "Git hooks directory not found. Are you in a git repository?"
        return 1
    fi

    # Pre-commit hook
    local pre_commit_hook="$hooks_dir/pre-commit"

    if [[ -f "$pre_commit_hook" ]]; then
        log_warning "Pre-commit hook already exists, backing up..."
        mv "$pre_commit_hook" "$pre_commit_hook.backup.$(date +%s)"
    fi

    log_info "Installing pre-commit hook..."
    cat > "$pre_commit_hook" << 'EOF'
#!/bin/bash
# Liara Engine - Git Pre-commit Hook
# Auto-generated by setup script

REPO_ROOT=$(git rev-parse --show-toplevel)

# Check for C++ files in commit
staged_cpp_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|h|hpp)$' | grep -v -E '(external/|build/)' || true)

if [[ -z "$staged_cpp_files" ]]; then
    exit 0
fi

echo " Checking code style..."

# Quick format check
format_issues=0
while IFS= read -r file; do
    if [[ -f "$REPO_ROOT/$file" ]]; then
        if ! clang-format --dry-run --Werror "$REPO_ROOT/$file" &>/dev/null; then
            echo "Formatting issue: $file"
            ((format_issues++))
        fi
    fi
done <<< "$staged_cpp_files"

if [[ $format_issues -gt 0 ]]; then
    echo
    echo "To fix formatting issues:"
    echo "   ./scripts/check-style.sh -f"
    echo
    echo "To bypass this check: git commit --no-verify"
    exit 1
fi

echo "Code style check passed!"
EOF

    chmod +x "$pre_commit_hook"
    log_success "Pre-commit hook installed"
}

main() {
    local install_tools=false
    local setup_hooks=false
    local do_all=true

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --install-tools)
                install_tools=true
                do_all=false
                shift
                ;;
            --setup-hooks)
                setup_hooks=true
                do_all=false
                shift
                ;;
            --all)
                do_all=true
                shift
                ;;
            --help)
                print_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                print_usage
                exit 1
                ;;
        esac
    done

    echo "================================================"
    echo "   Liara Engine - Code Style Tools Setup"
    echo "================================================"
    echo

    if [[ "$do_all" == "true" ]]; then
        install_tools=true
        setup_hooks=true
    fi

    if [[ "$install_tools" == "true" ]]; then
        install_tools || log_warning "Tool installation failed, continuing..."
        echo
    fi

    create_scripts
    echo

    if [[ "$setup_hooks" == "true" ]]; then
        setup_hooks
        echo
    fi

    # Instructions finales
    echo "================================================"
    echo "                    SETUP COMPLETE"
    echo "================================================"
    echo
    echo "Next steps:"
    echo "  1. Test the setup: ./scripts/check-style.sh"
    echo "  2. Format your code: ./scripts/check-style.sh -f"
    echo "  3. Commit changes and test the pre-commit hook"
    echo
    echo "Tools status:"
    if command -v clang-format &>/dev/null; then
        echo "  clang-format: $(clang-format --version | head -1)"
    else
        echo "  clang-format: Not found"
    fi
    if command -v clang-tidy &>/dev/null; then
        echo "  clang-tidy: $(clang-tidy --version | head -1)"
    else
        echo "  clang-tidy: Not found"
    fi
    echo
    echo "For more information, see: docs/CODING_STYLE.md"
}

main "$@"