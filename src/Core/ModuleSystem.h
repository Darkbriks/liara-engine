#pragma once

/**
 * @file ModuleSystem.h
 * @brief Central module import system for Liara Engine
 *
 * This file provides macros to uniformly import modules or include generated headers
 * depending on compiler support. All old headers can be deleted.
 */

// Detection macro for module support
#if defined(LIARA_MODULES_ENABLED) && !defined(LIARA_FORCE_NO_MODULES)
    #define LIARA_HAS_MODULES 1
#else
    #define LIARA_HAS_MODULES 0
#endif

// =============================================================================
// CORE MACROS FOR MODULE/HEADER SELECTION
// =============================================================================

// Macros for conditional compilation based on module availability
#if LIARA_HAS_MODULES
    #define LIARA_IF_MODULES(code) code
    #define LIARA_IF_HEADERS(code)
#else
    #define LIARA_IF_MODULES(code)
    #define LIARA_IF_HEADERS(code) code
#endif

// =============================================================================
// MODULE USAGE MACROS
// =============================================================================

// Users will simply include these proxy headers instead of using macros
// The proxy headers are generated by CMake and do the module/header switching

// For example, instead of LIARA_USE_UTILS(), users will write:
//     #include <Liara/Utils.h>

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

// Macro to check if we're using modules or headers at compile time
constexpr bool LiaraUsingModules() { return LIARA_HAS_MODULES; }

// Function to get build mode string
constexpr const char* LiaraModuleSystemMode() {
#if LIARA_HAS_MODULES
    return "C++20 Modules";
#else
    return "Generated Headers";
#endif
}

// =============================================================================
// VERSION INFORMATION
// =============================================================================

namespace Liara::ModuleSystem
{
    constexpr int VERSION_MAJOR = 1;
    constexpr int VERSION_MINOR = 0;
    constexpr int VERSION_PATCH = 0;

    constexpr bool USING_MODULES = LIARA_HAS_MODULES;
    constexpr const char* MODE = LiaraModuleSystemMode();
}

// =============================================================================
// VALIDATION MACROS
// =============================================================================

// Macro to validate module system is working
#define LIARA_VALIDATE_MODULE_SYSTEM()                                                          \
    static_assert(LIARA_HAS_MODULES == 0 || LIARA_HAS_MODULES == 1, "Module detection failed"); \
    static_assert(Liara::ModuleSystem::VERSION_MAJOR >= 1, "Module system version too old");
