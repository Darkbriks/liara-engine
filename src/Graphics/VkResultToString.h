#pragma once

#include <vulkan/vulkan.h>

#include <string_view>

namespace Liara::Graphics
{

#define DEFINE_VK_RESULT_CASE(result) \
    case result: return #result

    constexpr std::string_view VkResultToString(const VkResult result) noexcept {
        switch (result) {
            DEFINE_VK_RESULT_CASE(VK_SUCCESS);
            DEFINE_VK_RESULT_CASE(VK_NOT_READY);
            DEFINE_VK_RESULT_CASE(VK_TIMEOUT);
            DEFINE_VK_RESULT_CASE(VK_EVENT_SET);
            DEFINE_VK_RESULT_CASE(VK_EVENT_RESET);
            DEFINE_VK_RESULT_CASE(VK_INCOMPLETE);
            DEFINE_VK_RESULT_CASE(VK_ERROR_OUT_OF_HOST_MEMORY);
            DEFINE_VK_RESULT_CASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INITIALIZATION_FAILED);
            DEFINE_VK_RESULT_CASE(VK_ERROR_DEVICE_LOST);
            DEFINE_VK_RESULT_CASE(VK_ERROR_MEMORY_MAP_FAILED);
            DEFINE_VK_RESULT_CASE(VK_ERROR_LAYER_NOT_PRESENT);
            DEFINE_VK_RESULT_CASE(VK_ERROR_EXTENSION_NOT_PRESENT);
            DEFINE_VK_RESULT_CASE(VK_ERROR_FEATURE_NOT_PRESENT);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INCOMPATIBLE_DRIVER);
            DEFINE_VK_RESULT_CASE(VK_ERROR_TOO_MANY_OBJECTS);
            DEFINE_VK_RESULT_CASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
            DEFINE_VK_RESULT_CASE(VK_ERROR_FRAGMENTED_POOL);
            DEFINE_VK_RESULT_CASE(VK_ERROR_UNKNOWN);
            DEFINE_VK_RESULT_CASE(VK_ERROR_OUT_OF_POOL_MEMORY);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INVALID_EXTERNAL_HANDLE);
            DEFINE_VK_RESULT_CASE(VK_ERROR_FRAGMENTATION);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
            DEFINE_VK_RESULT_CASE(VK_PIPELINE_COMPILE_REQUIRED);
            DEFINE_VK_RESULT_CASE(VK_ERROR_SURFACE_LOST_KHR);
            DEFINE_VK_RESULT_CASE(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
            DEFINE_VK_RESULT_CASE(VK_SUBOPTIMAL_KHR);
            DEFINE_VK_RESULT_CASE(VK_ERROR_OUT_OF_DATE_KHR);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
            DEFINE_VK_RESULT_CASE(VK_ERROR_VALIDATION_FAILED_EXT);
            DEFINE_VK_RESULT_CASE(VK_ERROR_INVALID_SHADER_NV);
            default: return "VK_UNKNOWN_ERROR";
        }
    }

#undef DEFINE_VK_RESULT_CASE

}