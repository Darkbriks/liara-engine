name: Linux Build

on:
  push:
    branches: [ main, version-* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published, created ]
  workflow_dispatch:

env:
  VULKAN_SDK_VERSION: "1.3.280.0"
  CMAKE_VERSION: "3.25.3"

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        distro:
          - name: ubuntu
            version: "22.04"
            container: ubuntu:22.04
            pkg_manager: apt
            packages: "sudo build-essential ninja-build file libvulkan-dev vulkan-validationlayers-dev libsdl2-dev libfmt-dev pkg-config vulkan-tools libglm-dev software-properties-common wget curl ca-certificates"
            update_cmd: "apt update && apt install -y"
            setup_compiler: "add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt update && apt install -y gcc-13 g++-13 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13"
          - name: fedora
            version: "39"
            container: fedora:39
            pkg_manager: dnf
            packages: "gcc-c++ ninja-build vulkan-devel vulkan-validation-layers-devel SDL2-devel fmt-devel pkg-config vulkan-tools libX11-devel libXext-devel alsa-lib-devel pulseaudio-libs-devel glm-devel wget dnf-plugins-core"
            update_cmd: "dnf update -y && dnf install -y"
            setup_compiler: ""
          - name: archlinux
            version: "latest"
            container: archlinux:latest
            pkg_manager: pacman
            packages: "base-devel ninja vulkan-devel vulkan-validation-layers sdl2 fmt pkgconf vulkan-tools glm wget shaderc"
            update_cmd: "pacman -Syu --noconfirm"
            setup_compiler: ""

    container:
      image: ${{ matrix.distro.container }}

    outputs:
      # Exposer les métadonnées pour les jobs suivants
      ubuntu-release-built: ${{ matrix.distro.name == 'ubuntu' && matrix.build_type == 'Release' }}
      artifact-name: liara-engine-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.ref_name }}

    steps:
      - name: Install Git
        run: |
          if [ "${{ matrix.distro.pkg_manager }}" = "apt" ]; then
            apt update && apt install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "dnf" ]; then
            dnf install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "pacman" ]; then
            pacman -Sy --noconfirm git
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          ${{ matrix.distro.update_cmd }} ${{ matrix.distro.packages }}

      - name: Setup compiler
        if: matrix.distro.name == 'ubuntu'
        run: |
          ${{ matrix.distro.setup_compiler }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Cache Vulkan SDK
        uses: actions/cache@v4
        id: vulkan-cache
        with:
          path: /opt/vulkan-sdk/${{ env.VULKAN_SDK_VERSION }}
          key: vulkan-sdk-${{ env.VULKAN_SDK_VERSION }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}
          restore-keys: |
            vulkan-sdk-${{ env.VULKAN_SDK_VERSION }}-${{ matrix.distro.name }}-
            vulkan-sdk-${{ env.VULKAN_SDK_VERSION }}-

      - name: Install Vulkan SDK and verify glslc
        run: |
          # Check if glslc is already available from installed packages
          if command -v glslc >/dev/null 2>&1; then
            echo "glslc found: $(which glslc)"
            glslc --version
            exit 0
          fi

          echo "glslc not found in packages, installing from Vulkan SDK..."

          # Variables de configuration
          VULKAN_SDK_DIR="/opt/vulkan-sdk"
          VULKAN_SDK_PATH="${VULKAN_SDK_DIR}/${{ env.VULKAN_SDK_VERSION }}"
          VULKAN_INSTALLER="vulkansdk-linux-x86_64-${{ env.VULKAN_SDK_VERSION }}.tar.xz"
          VULKAN_URL="https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/linux/${VULKAN_INSTALLER}"

          # Vérifier le cache
          if [ "${{ steps.vulkan-cache.outputs.cache-hit }}" = "true" ] && [ -d "${VULKAN_SDK_PATH}" ] && [ -x "${VULKAN_SDK_PATH}/x86_64/bin/glslc" ]; then
            echo "✓ Vulkan SDK restored from cache"
            export VULKAN_SDK="${VULKAN_SDK_PATH}/x86_64"
            export PATH="${VULKAN_SDK}/bin:${PATH}"
            export LD_LIBRARY_PATH="${VULKAN_SDK}/lib:${LD_LIBRARY_PATH:-}"
            export VK_LAYER_PATH="${VULKAN_SDK}/etc/vulkan/explicit_layer.d"

            echo "VULKAN_SDK=${VULKAN_SDK}" >> $GITHUB_ENV
            echo "PATH=${VULKAN_SDK}/bin:${PATH}" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=${VULKAN_SDK}/lib:${LD_LIBRARY_PATH:-}" >> $GITHUB_ENV
            echo "VK_LAYER_PATH=${VULKAN_SDK}/etc/vulkan/explicit_layer.d" >> $GITHUB_ENV

            glslc --version
            exit 0
          fi

          # Installation du SDK
          sudo mkdir -p "${VULKAN_SDK_DIR}"
          TEMP_DIR="/tmp/vulkan-install"
          mkdir -p "${TEMP_DIR}"
          cd "${TEMP_DIR}"

          echo "Downloading Vulkan SDK..."
          wget --progress=dot:giga --timeout=30 --tries=3 "${VULKAN_URL}"

          echo "Extracting Vulkan SDK..."
          mkdir -p extract_temp
          tar -xf "${VULKAN_INSTALLER}" -C extract_temp

          EXTRACTED_DIR=$(find extract_temp -maxdepth 1 -type d -name "*${{ env.VULKAN_SDK_VERSION }}*" | head -1)
          if [ -z "${EXTRACTED_DIR}" ]; then
            echo "ERROR: Could not find extracted SDK directory"
            exit 1
          fi

          sudo mv "${EXTRACTED_DIR}" "${VULKAN_SDK_PATH}"
          sudo chown -R root:root "${VULKAN_SDK_PATH}"
          sudo chmod -R 755 "${VULKAN_SDK_PATH}"

          # Configuration des variables d'environnement
          export VULKAN_SDK="${VULKAN_SDK_PATH}/x86_64"
          export PATH="${VULKAN_SDK}/bin:${PATH}"
          export LD_LIBRARY_PATH="${VULKAN_SDK}/lib:${LD_LIBRARY_PATH:-}"
          export VK_LAYER_PATH="${VULKAN_SDK}/etc/vulkan/explicit_layer.d"

          echo "VULKAN_SDK=${VULKAN_SDK}" >> $GITHUB_ENV
          echo "PATH=${VULKAN_SDK}/bin:${PATH}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${VULKAN_SDK}/lib:${LD_LIBRARY_PATH:-}" >> $GITHUB_ENV
          echo "VK_LAYER_PATH=${VULKAN_SDK}/etc/vulkan/explicit_layer.d" >> $GITHUB_ENV

          # Vérification finale
          if [ ! -x "${VULKAN_SDK}/bin/glslc" ]; then
            echo "ERROR: glslc not found or not executable"
            exit 1
          fi

          glslc --version
          echo "✓ Vulkan SDK installation successful!"

      - name: Cache CMake build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-
            cmake-deps-${{ matrix.distro.name }}-

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build project
        run: |
          cd build
          ninja -j$(nproc)

      - name: Build shaders
        run: |
          cd build
          ninja LiaraShaders

      - name: Test executable
        run: |
          cd build/app
          if [ -f "Demo" ]; then
            echo "Demo executable found successfully"
            file Demo
            ldd Demo || echo "Static executable or missing libs"
          else
            echo "ERROR: Demo executable not found!"
            ls -la
            exit 1
          fi

      - name: Prepare build artifacts
        run: |
          cd build/app
          mkdir -p package
          cp Demo package/
          
          # Copier les assets s'ils existent
          if [ -d "../../assets" ]; then
            cp -r ../../assets package/
          fi
          
          # Copier les shaders compilés
          if [ -d "../shaders" ]; then
            # Nettoyer et copier seulement les .spv
            find ../shaders -name "*.spv" -exec cp {} package/ \; 2>/dev/null || true
            # Créer un dossier shaders dans le package si des fichiers ont été copiés
            if ls package/*.spv >/dev/null 2>&1; then
              mkdir -p package/shaders
              mv package/*.spv package/shaders/
            fi
          fi
          
          # Créer l'archive portable
          tar -czf ../../${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz -C package .

      - name: Upload portable archive (Release builds)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.ref_name }}
          path: |
            ${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz
          retention-days: 30

      - name: Upload Ubuntu Release build artifacts for AppImage
        if: matrix.distro.name == 'ubuntu' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-release-build-${{ github.ref_name }}
          path: |
            build/app/Demo
            build/shaders/*.spv
            assets/
          retention-days: 1  # Temporaire, juste pour le job AppImage

      - name: Debug artifacts before upload (Ubuntu Release only)
        if: matrix.distro.name == 'ubuntu' && matrix.build_type == 'Release'
        run: |
          echo "=== Files to be uploaded for AppImage ==="
          echo "Demo executable:"
          ls -la build/app/Demo || echo "Demo not found!"
          echo ""
          echo "Shaders directory:"
          ls -la build/shaders/ || echo "Shaders directory not found!"
          echo ""
          echo "Assets directory:"
          ls -la assets/ || echo "Assets directory not found!"
          echo ""
          echo "Working directory: $(pwd)"

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.run_number }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/**/*.log
          retention-days: 7

  # Job séparé optimisé pour créer l'AppImage
  build-appimage:
    runs-on: ubuntu-22.04
    needs: build-linux
    # Seulement si le build Ubuntu Release a réussi
    if: needs.build-linux.result == 'success'

    steps:
      - name: Checkout code (pour les métadonnées)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            CMakeLists.txt
            README.md
          sparse-checkout-cone-mode: false

      - name: Download Ubuntu Release artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-release-build-${{ github.ref_name }}
          path: build-artifacts/

      - name: Debug artifacts structure
        run: |
          echo "=== Downloaded artifacts structure ==="
          find build-artifacts -type f -ls 2>/dev/null || echo "No files found"
          echo ""
          echo "=== Looking for Demo executable ==="
          find build-artifacts -name "Demo" -type f -exec ls -la {} \; || echo "Demo executable not found"
          echo ""
          echo "=== All files in build-artifacts ==="
          ls -la build-artifacts/ || echo "Directory not accessible"

      - name: Install AppImage dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            fuse \
            file \
            imagemagick \
            desktop-file-utils

      - name: Prepare AppImage structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/pixmaps
          mkdir -p AppDir/usr/share/doc/${{ github.event.repository.name }}
          
          # Trouver et copier l'exécutable Demo
          DEMO_PATH=$(find build-artifacts -name "Demo" -type f | head -1)
          if [ -z "$DEMO_PATH" ]; then
            echo "ERROR: Demo executable not found in artifacts!"
            echo "Available files:"
            find build-artifacts -type f
            exit 1
          fi
          
          echo "Found Demo at: $DEMO_PATH"
          cp "$DEMO_PATH" AppDir/usr/bin/
          chmod +x AppDir/usr/bin/Demo
          
          # Copier les assets s'ils existent
          if [ -d "build-artifacts/assets" ]; then
            cp -r build-artifacts/assets AppDir/usr/share/${{ github.event.repository.name }}/
            echo "Copied assets directory"
          else
            echo "No assets directory found"
          fi
          
          # Copier les shaders
          SHADER_DIR="AppDir/usr/share/${{ github.event.repository.name }}/shaders"
          mkdir -p "$SHADER_DIR"
          
          # Chercher les fichiers .spv dans tous les sous-répertoires
          SHADER_COUNT=0
          while IFS= read -r -d '' shader_file; do
            cp "$shader_file" "$SHADER_DIR/"
            SHADER_COUNT=$((SHADER_COUNT + 1))
          done < <(find build-artifacts -name "*.spv" -type f -print0 2>/dev/null)
          
          echo "Copied $SHADER_COUNT shader files"
          
          if [ $SHADER_COUNT -eq 0 ]; then
            echo "Warning: No shader files found!"
            echo "Available files in build-artifacts:"
            find build-artifacts -type f
          fi

      - name: Create desktop file
        run: |
          cat > AppDir/usr/share/applications/${{ github.event.repository.name }}.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Liara Engine Demo
          Comment=Liara Engine capabilities demonstration
          Exec=Demo
          Icon=${{ github.event.repository.name }}
          Categories=Game;Development;Graphics;
          Keywords=game;engine;vulkan;graphics;3d;
          Terminal=false
          StartupNotify=true
          EOF
          
          # Valider le fichier desktop
          desktop-file-validate AppDir/usr/share/applications/${{ github.event.repository.name }}.desktop

      - name: Create application icon
        run: |
          # Créer une icône temporaire (à remplacer par une vraie icône plus tard)
          convert -size 256x256 \
            -background 'linear-gradient(45deg, #667eea 0%, #764ba2 100%)' \
            -fill white \
            -gravity center \
            -pointsize 32 \
            -font DejaVu-Sans-Bold \
            label:"LIARA\nENGINE" \
            AppDir/usr/share/pixmaps/${{ github.event.repository.name }}.png
          
          # Créer les différentes tailles d'icône
          for size in 16 32 48 64 128 256; do
            mkdir -p AppDir/usr/share/icons/hicolor/${size}x${size}/apps
            convert AppDir/usr/share/pixmaps/${{ github.event.repository.name }}.png \
              -resize ${size}x${size} \
              AppDir/usr/share/icons/hicolor/${size}x${size}/apps/${{ github.event.repository.name }}.png
          done

      - name: Add documentation
        run: |
          # Copier la documentation de base
          if [ -f "README.md" ]; then
            cp README.md AppDir/usr/share/doc/${{ github.event.repository.name }}/
          fi
          
          # Créer un fichier d'info sur l'AppImage
          cat > AppDir/usr/share/doc/${{ github.event.repository.name }}/AppImage-Info.txt << EOF
          Liara Engine Demo - AppImage Package
          
          Build Information:
          - Version: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Built from: ${{ github.repository }}
          
          This AppImage contains:
          - Liara Engine Demo executable
          - Required assets and shaders
          - All necessary dependencies
          
          Usage:
          - Make executable: chmod +x ${{ github.event.repository.name }}-*.AppImage
          - Run: ./${{ github.event.repository.name }}-*.AppImage
          
          For more information, visit: https://github.com/${{ github.repository }}
          EOF

      - name: Download AppImage tools
        run: |
          # Télécharger linuxdeploy et appimagetool
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage appimagetool-x86_64.AppImage

      - name: Build AppImage
        run: |
          # Utiliser linuxdeploy pour résoudre les dépendances
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --desktop-file AppDir/usr/share/applications/${{ github.event.repository.name }}.desktop \
            --icon-file AppDir/usr/share/pixmaps/${{ github.event.repository.name }}.png \
            --executable AppDir/usr/bin/Demo
          
          # Créer l'AppImage finale
          ./appimagetool-x86_64.AppImage AppDir \
            ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage

      - name: Test AppImage
        run: |
          # Vérifier que l'AppImage a été créée
          if [ -f "${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage" ]; then
            echo "✓ AppImage created successfully"
            file ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
            ls -lh ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
          
            # Test basique (vérifier qu'elle est exécutable)
            chmod +x ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
            echo "✓ AppImage is executable"
          else
            echo "ERROR: AppImage not found!"
            ls -la
            exit 1
          fi

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: liara-engine-appimage-${{ github.ref_name }}
          path: ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
          retention-days: 30

      - name: Cleanup temporary artifacts
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Supprimer l'artefact temporaire Ubuntu
            try {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
              });
            
              const tempArtifact = artifacts.data.artifacts.find(
                artifact => artifact.name === 'ubuntu-release-build-${{ github.ref_name }}'
              );
            
              if (tempArtifact) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: tempArtifact.id,
                });
                console.log('Temporary Ubuntu build artifact cleaned up');
              }
            } catch (error) {
              console.log('Could not cleanup temporary artifact:', error.message);
            }