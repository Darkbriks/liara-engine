name: Linux Build

on:
  push:
    branches: [ 3d-rendering, version-* ]
  pull_request:
    branches: [ 3d-rendering ]

env:
  VULKAN_SDK_VERSION: "1.3.280.0"
  BUILD_TYPE_DEBUG: Debug
  BUILD_TYPE_RELEASE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        distro:
          - name: ubuntu
            version: "22.04"
            container: ubuntu:22.04
            pkg_manager: apt
            packages: "build-essential cmake ninja-build libvulkan-dev vulkan-validationlayers-dev libsdl2-dev libfmt-dev pkg-config glslang-tools curl ca-certificates libglm-dev software-properties-common"
            update_cmd: "apt update && apt install -y"
            setup_compiler: "add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt update && apt install -y gcc-13 g++-13 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13"
          - name: fedora
            version: "39"
            container: fedora:39
            pkg_manager: dnf
            packages: "gcc-c++ cmake ninja-build vulkan-devel vulkan-validation-layers-devel SDL2-devel fmt-devel pkg-config glslang libX11-devel libXext-devel alsa-lib-devel pulseaudio-libs-devel glm-devel"
            update_cmd: "dnf update -y && dnf install -y"
            setup_compiler: ""
          - name: archlinux
            version: "latest"
            container: archlinux:latest
            pkg_manager: pacman
            packages: "base-devel cmake ninja vulkan-devel vulkan-validation-layers sdl2 fmt pkgconf glslang glm"
            update_cmd: "pacman -Syu --noconfirm"
            setup_compiler: ""

    container:
      image: ${{ matrix.distro.container }}

    steps:
      - name: Install Git
        run: |
          if [ "${{ matrix.distro.pkg_manager }}" = "apt" ]; then
            apt update && apt install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "dnf" ]; then
            dnf install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "pacman" ]; then
            pacman -Sy --noconfirm git
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          ${{ matrix.distro.update_cmd }} ${{ matrix.distro.packages }}

      - name: Setup modern compiler (Ubuntu only)
        if: matrix.distro.name == 'ubuntu'
        run: |
          ${{ matrix.distro.setup_compiler }}

      - name: Cache CMake build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-
            cmake-deps-${{ matrix.distro.name }}-

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=install

      - name: Build project
        run: |
          cd build
          ninja -j$(nproc)

      - name: Build shaders
        run: |
          cd build
          ninja Shaders

      - name: Install project
        run: |
          cd build
          ninja install

      - name: Create portable archive
        run: |
          cd build/install
          tar -czf ../../${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz *

      - name: Test executable
        run: |
          cd build/install
          # Quick smoke test - just check if binary exists and has correct format
          file bin/* || ls -la
          echo "Build completed successfully for ${{ matrix.distro.name }} ${{ matrix.build_type }}"

      - name: Upload artifacts (Release builds on version tags)
        if: matrix.build_type == 'Release' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: liara-engine-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.ref_name }}
          path: |
            ${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz
          retention-days: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.run_number }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/**/*.log
          retention-days: 7

  # Job séparé pour créer une AppImage portable (Ubuntu uniquement)
  build-appimage:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build libvulkan-dev vulkan-validationlayers-dev libsdl2-dev libfmt-dev pkg-config glslang-tools curl ca-certificates libglm-dev wget fuse

      - name: Configure and build
        run: |
          mkdir build && cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=AppDir/usr
          ninja -j$(nproc)
          ninja Shaders
          ninja install

      - name: Create AppImage
        run: |
          cd build
          
          # Create desktop file
          cat > AppDir/liara-engine.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Liara Engine
          Exec=FirstApp
          Icon=liara-engine
          Categories=Game;Development;
          EOF
          
          # Create basic icon (you might want to replace with actual icon)
          mkdir -p AppDir/usr/share/pixmaps
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > AppDir/usr/share/pixmaps/liara-engine.png
          
          # Download linuxdeploy and appimagetool
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x *.AppImage
          
          # Create AppImage
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --desktop-file AppDir/liara-engine.desktop
          ./appimagetool-x86_64.AppImage AppDir ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: liara-engine-appimage-${{ github.ref_name }}
          path: build/${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
          retention-days: 30