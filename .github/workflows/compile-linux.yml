name: Linux Build

on:
  push:
    branches: [ 3d-rendering, version-* ]
  pull_request:
    branches: [ 3d-rendering ]

env:
  VULKAN_SDK_VERSION: "1.3.280.0"
  CMAKE_VERSION: "3.25.3"

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        distro:
          - name: ubuntu
            version: "22.04"
            container: ubuntu:22.04
            pkg_manager: apt
            packages: "build-essential ninja-build libvulkan-dev vulkan-validationlayers-dev libsdl2-dev libfmt-dev pkg-config vulkan-tools libglm-dev software-properties-common wget curl ca-certificates"
            update_cmd: "apt update && apt install -y"
            setup_compiler: "add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt update && apt install -y gcc-13 g++-13 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13"
          - name: fedora
            version: "39"
            container: fedora:39
            pkg_manager: dnf
            packages: "gcc-c++ ninja-build vulkan-devel vulkan-validation-layers-devel SDL2-devel fmt-devel pkg-config vulkan-tools libX11-devel libXext-devel alsa-lib-devel pulseaudio-libs-devel glm-devel wget dnf-plugins-core shaderc"
            update_cmd: "dnf update -y && dnf install -y"
            setup_compiler: ""
          - name: archlinux
            version: "latest"
            container: archlinux:latest
            pkg_manager: pacman
            packages: "base-devel ninja vulkan-devel vulkan-validation-layers sdl2 fmt pkgconf vulkan-tools glm wget shaderc"
            update_cmd: "pacman -Syu --noconfirm"
            setup_compiler: ""

    container:
      image: ${{ matrix.distro.container }}

    steps:
      - name: Install Git
        run: |
          if [ "${{ matrix.distro.pkg_manager }}" = "apt" ]; then
            apt update && apt install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "dnf" ]; then
            dnf install -y git
          elif [ "${{ matrix.distro.pkg_manager }}" = "pacman" ]; then
            pacman -Sy --noconfirm git
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          ${{ matrix.distro.update_cmd }} ${{ matrix.distro.packages }}

      - name: Setup modern compiler (Ubuntu only)
        if: matrix.distro.name == 'ubuntu'
        run: |
          ${{ matrix.distro.setup_compiler }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25'

      - name: Verify CMake version
        run: cmake --version

      - name: Install Vulkan SDK and verify glslc
        run: |
          # Check if glslc is already available from installed packages
          if command -v glslc >/dev/null 2>&1; then
            echo "glslc found: $(which glslc)"
            glslc --version
            exit 0
          fi

          echo "glslc not found in packages, installing from Vulkan SDK for ${{ matrix.distro.name }}..."

          if [ "${{ matrix.distro.name }}" = "ubuntu" ]; then
            # Ubuntu: Install from Lunarg repository
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add -
            wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list \
              https://packages.lunarg.com/vulkan/${{ env.VULKAN_SDK_VERSION }}/lunarg-vulkan-${{ env.VULKAN_SDK_VERSION }}-jammy.list
            apt update
            apt install -y vulkan-sdk

          elif [ "${{ matrix.distro.name }}" = "fedora" ]; then
            # Determine if we need sudo (containers run as root)
            if [ "$(id -u)" -eq 0 ]; then
              SUDO=""
            else
              SUDO="sudo"
            fi
          
            # Fedora: Install Vulkan SDK manually since repo might be unreliable
            cd /tmp
            wget -q https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/linux/vulkansdk-linux-x86_64-${{ env.VULKAN_SDK_VERSION }}.tar.gz
            tar -xzf vulkansdk-linux-x86_64-${{ env.VULKAN_SDK_VERSION }}.tar.gz
          
            # Copy glslc and related tools to system path  
            ${SUDO} cp ${{ env.VULKAN_SDK_VERSION }}/x86_64/bin/glslc /usr/local/bin/
            ${SUDO} cp ${{ env.VULKAN_SDK_VERSION }}/x86_64/bin/glslangValidator /usr/local/bin/ || true
            ${SUDO} chmod +x /usr/local/bin/glslc

          elif [ "${{ matrix.distro.name }}" = "archlinux" ]; then
            # Arch: shaderc should already be installed, but double-check
            if ! command -v glslc >/dev/null 2>&1; then
              echo "ERROR: shaderc package should provide glslc but it's missing!"
              pacman -Ql shaderc | grep glslc || echo "glslc not found in shaderc package"
              exit 1
            fi
          fi
          
          # Final verification
          if command -v glslc >/dev/null 2>&1; then
            echo "glslc successfully available: $(which glslc)"
            glslc --version
          else
            echo "ERROR: glslc still not found after installation attempts!"
            echo "Searching for glslc in common locations:"
            find /usr -name "*glslc*" 2>/dev/null | head -10 || echo "No glslc found in /usr"
            find /opt -name "*glslc*" 2>/dev/null | head -5 || echo "No glslc found in /opt"
            find /tmp -name "*glslc*" 2>/dev/null | head -5 || echo "No glslc found in /tmp"
            exit 1
          fi

      - name: Cache CMake build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-
            cmake-deps-${{ matrix.distro.name }}-

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build project
        run: |
          cd build
          ninja -j$(nproc)

      - name: Build shaders
        run: |
          cd build
          ninja Shaders

      - name: Test executable
        run: |
          cd build
          if [ -f "Demo" ]; then
            echo "Demo executable found successfully"
            file Demo
            ldd Demo || echo "Static executable or missing libs"
          else
            echo "ERROR: Demo executable not found!"
            ls -la
            exit 1
          fi

      - name: Create portable archive
        if: matrix.build_type == 'Release'
        run: |
          cd build
          mkdir -p package
          cp Demo package/
          cp -r ../assets package/ 2>/dev/null || echo "No assets directory found"
          if [ -d "shaders" ]; then
            cp -r shaders package/
          fi
          cd package
          tar -czf ../../${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz *

      - name: Upload artifacts (Release builds on version tags)
        if: matrix.build_type == 'Release' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: liara-engine-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.ref_name }}
          path: |
            ${{ github.event.repository.name }}-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-x86_64.tar.gz
          retention-days: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.distro.name }}-${{ matrix.distro.version }}-${{ matrix.build_type }}-${{ github.run_number }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/**/*.log
          retention-days: 7

  # Job séparé pour créer une AppImage portable (Ubuntu uniquement)
  build-appimage:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential ninja-build libvulkan-dev vulkan-validationlayers-dev libsdl2-dev libfmt-dev pkg-config vulkan-tools libglm-dev wget fuse

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25'

      - name: Verify CMake version
        run: cmake --version

      - name: Configure and build
        run: |
          mkdir build && cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=AppDir/usr
          ninja -j$(nproc)
          ninja Shaders

      - name: Create AppImage
        run: |
          cd build
          mkdir -p AppDir/usr/bin
          cp Demo AppDir/usr/bin/
          
          # Copy assets and shaders
          if [ -d "../assets" ]; then
            cp -r ../assets AppDir/usr/
          fi
          if [ -d "shaders" ]; then
            cp -r shaders AppDir/usr/
          fi
          
          # Create desktop file
          cat > AppDir/liara-engine.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Liara Engine Demo
          Exec=Demo
          Icon=liara-engine
          Categories=Game;Development;
          EOF
          
          # Create basic icon (you might want to replace with actual icon)
          mkdir -p AppDir/usr/share/pixmaps
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > AppDir/usr/share/pixmaps/liara-engine.png
          
          # Download linuxdeploy and appimagetool
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x *.AppImage
          
          # Create AppImage
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --desktop-file AppDir/liara-engine.desktop
          ./appimagetool-x86_64.AppImage AppDir ${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: liara-engine-appimage-${{ github.ref_name }}
          path: build/${{ github.event.repository.name }}-${{ github.ref_name }}-x86_64.AppImage
          retention-days: 30