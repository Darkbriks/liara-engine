name: Code Style Check

on:
  push:
    branches: [ main, version-* ]
  pull_request:
    branches: [ main ]

jobs:
  code-style:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release ]
        distro:
          - name: archlinux
          - version: "latest"
          - container: archlinux:latest
          - pkg_manager: pacman
          - packages: "base-devel ninja vulkan-devel vulkan-validation-layers sdl2 fmt pkgconf vulkan-tools glm wget shaderc"
          - update_cmd: "pacman -Syu --noconfirm"

    container:
      image: ${{ matrix.distro.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          ${{ matrix.distro.update_cmd }} ${{ matrix.distro.packages }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Verify CMake version
        run: cmake --version

      - name: Cache CMake build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            cmake-deps-${{ matrix.distro.name }}-${{ matrix.build_type }}-
            cmake-deps-${{ matrix.distro.name }}-

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Get changed files
        id: changed-files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" ]]; then
            # MR vers main : vÃ©rifier tout le codebase
            echo "CHECK_ALL=true" >> $GITHUB_OUTPUT
            find src app -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
              grep -v -E "(external/|build/|\.git/)" > files_to_check.txt
          else
            # Commit sur dev branch : seulement les fichiers modifiÃ©s
            echo "CHECK_ALL=false" >> $GITHUB_OUTPUT
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              git diff --name-only origin/${{ github.base_ref }}...HEAD
            else
              git diff --name-only HEAD~1
            fi | grep -E "\.(cpp|h|hpp)$" | \
              grep -v -E "(external/|build/|\.git/)" > files_to_check.txt || touch files_to_check.txt
          fi
          
          echo "Files to check:"
          cat files_to_check.txt

      - name: Run clang-format check
        id: format-check
        run: |
          if [[ ! -s files_to_check.txt ]]; then
            echo "No files to check"
            exit 0
          fi
          
          FORMAT_ISSUES=0
          echo "## Clang-Format Issues" >> format_report.md
          echo "" >> format_report.md
          
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              if ! clang-format --dry-run --Werror "$file" 2>/dev/null; then
                echo "**$file** has formatting issues" >> format_report.md
                FORMAT_ISSUES=$((FORMAT_ISSUES + 1))
          
                # GÃ©nÃ©rer un diff pour montrer les problÃ¨mes
                echo "<details><summary>Show diff</summary>" >> format_report.md
                echo "" >> format_report.md
                echo "\`\`\`diff" >> format_report.md
                clang-format "$file" | diff -u "$file" - || true >> format_report.md
                echo "\`\`\`" >> format_report.md
                echo "</details>" >> format_report.md
                echo "" >> format_report.md
              fi
            fi
          done < files_to_check.txt
          
          if [[ $FORMAT_ISSUES -eq 0 ]]; then
            echo "All files are properly formatted" >> format_report.md
          else
            echo "Found $FORMAT_ISSUES formatting issues" >> format_report.md
          fi
          
          echo "FORMAT_ISSUES=$FORMAT_ISSUES" >> $GITHUB_OUTPUT

      - name: Run clang-tidy check
        id: tidy-check
        run: |
          if [[ ! -s files_to_check.txt ]]; then
            echo "No files to check"
            exit 0
          fi
          
          # CrÃ©er un compile_commands.json minimal pour clang-tidy
          mkdir -p build
          cd build
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug
          cd ..
          
          TIDY_ISSUES=0
          echo "## Clang-Tidy Issues" >> tidy_report.md
          echo "" >> tidy_report.md
          
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              echo "Checking $file with clang-tidy..."
              if ! clang-tidy "$file" -p build/ --quiet > tidy_output.tmp 2>&1; then
                if [[ -s tidy_output.tmp ]]; then
                  echo "**$file** has tidy warnings:" >> tidy_report.md
                  echo "<details><summary>Show issues</summary>" >> tidy_report.md
                  echo "" >> tidy_report.md
                  echo "\`\`\`" >> tidy_report.md
                  cat tidy_output.tmp >> tidy_report.md
                  echo "\`\`\`" >> tidy_report.md
                  echo "</details>" >> tidy_report.md
                  echo "" >> tidy_report.md
                  TIDY_ISSUES=$((TIDY_ISSUES + 1))
                fi
              fi
            fi
          done < files_to_check.txt
          
          if [[ $TIDY_ISSUES -eq 0 ]]; then
            echo "No clang-tidy issues found" >> tidy_report.md
          fi
          
          echo "TIDY_ISSUES=$TIDY_ISSUES" >> $GITHUB_OUTPUT

      - name: Auto-fix formatting (if enabled)
        id: auto-fix
        if: steps.format-check.outputs.FORMAT_ISSUES != '0' && github.event_name == 'pull_request'
        run: |
          echo "AUTO_FIX_AVAILABLE=true" >> $GITHUB_OUTPUT
          
          # Appliquer les corrections automatiques
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              clang-format -i "$file"
            fi
          done < files_to_check.txt
          
          # CrÃ©er un patch
          git diff > style_fixes.patch
          
          if [[ -s style_fixes.patch ]]; then
            echo "## Auto-fix Available" >> autofix_report.md
            echo "" >> autofix_report.md
            echo "The following automatic fixes can be applied:" >> autofix_report.md
            echo "" >> autofix_report.md
            echo "<details><summary>Show patch</summary>" >> autofix_report.md
            echo "" >> autofix_report.md
            echo "\`\`\`diff" >> autofix_report.md
            cat style_fixes.patch >> autofix_report.md
            echo "\`\`\`" >> autofix_report.md
            echo "</details>" >> autofix_report.md
            echo "" >> autofix_report.md
            echo "You can apply these fixes locally with:" >> autofix_report.md
            echo "\`\`\`bash" >> autofix_report.md
            echo "# Download and apply the patch" >> autofix_report.md
            echo "curl -L \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/style_fixes\" -o style_fixes.patch" >> autofix_report.md
            echo "git apply style_fixes.patch" >> autofix_report.md
            echo "\`\`\`" >> autofix_report.md
          fi

      - name: Upload auto-fix patch
        if: steps.auto-fix.outputs.AUTO_FIX_AVAILABLE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: style_fixes
          path: style_fixes.patch
          retention-days: 30

      - name: Create summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = "# Code Style Check Results\n\n";
            
            // Format report
            if (fs.existsSync('format_report.md')) {
              comment += fs.readFileSync('format_report.md', 'utf8') + "\n\n";
            }
            
            // Tidy report  
            if (fs.existsSync('tidy_report.md')) {
              comment += fs.readFileSync('tidy_report.md', 'utf8') + "\n\n";
            }
            
            // Auto-fix report
            if (fs.existsSync('autofix_report.md')) {
              comment += fs.readFileSync('autofix_report.md', 'utf8') + "\n\n";
            }
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸ“‹ Code Style Check Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Determine exit code
        run: |
          FORMAT_ISSUES=${{ steps.format-check.outputs.FORMAT_ISSUES || 0 }}
          TIDY_ISSUES=${{ steps.tidy-check.outputs.TIDY_ISSUES || 0 }}
          TOTAL_ISSUES=$((FORMAT_ISSUES + TIDY_ISSUES))
          
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            # MR vers main : bloquer si problÃ¨mes
            if [[ $TOTAL_ISSUES -gt 0 ]]; then
              echo "Blocking merge to main due to $TOTAL_ISSUES style issues"
              exit 1
            fi
          else
            # Dev branches : warnings seulement
            if [[ $TOTAL_ISSUES -gt 0 ]]; then
              echo "Found $TOTAL_ISSUES style issues (warnings only)"
            fi
          fi
          
          echo "Code style check completed"